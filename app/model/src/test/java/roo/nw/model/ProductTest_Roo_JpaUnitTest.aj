// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package roo.nw.model;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.Arrays;
import java.util.Collections;
import org.junit.Test;
import roo.nw.model.OrderDetail;
import roo.nw.model.Product;
import roo.nw.model.ProductTest;
import roo.nw.model.PurchaseOrder;
import roo.nw.model.dod.OrderDetailFactory;
import roo.nw.model.dod.ProductFactory;
import roo.nw.model.dod.PurchaseOrderFactory;

privileged aspect ProductTest_Roo_JpaUnitTest {
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private OrderDetailFactory ProductTest.orderDetailFactory = new OrderDetailFactory();
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ProductFactory ProductTest.productFactory = new ProductFactory();
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private PurchaseOrderFactory ProductTest.purchaseOrderFactory = new PurchaseOrderFactory();
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return OrderDetailFactory
     */
    public OrderDetailFactory ProductTest.getOrderDetailFactory() {
        return orderDetailFactory;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param orderDetailFactory
     */
    public void ProductTest.setOrderDetailFactory(OrderDetailFactory orderDetailFactory) {
        this.orderDetailFactory = orderDetailFactory;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ProductFactory
     */
    public ProductFactory ProductTest.getProductFactory() {
        return productFactory;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param productFactory
     */
    public void ProductTest.setProductFactory(ProductFactory productFactory) {
        this.productFactory = productFactory;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return PurchaseOrderFactory
     */
    public PurchaseOrderFactory ProductTest.getPurchaseOrderFactory() {
        return purchaseOrderFactory;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param purchaseOrderFactory
     */
    public void ProductTest.setPurchaseOrderFactory(PurchaseOrderFactory purchaseOrderFactory) {
        this.purchaseOrderFactory = purchaseOrderFactory;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @throws Exception
     */
    @Test
    public void ProductTest.addToOrderDetailsShouldAddTheOrderDetailToTheorderDetailsRelationship() throws Exception {
        // Setup
        Product product = getProductFactory().create(0);
        OrderDetail orderDetail1 = getOrderDetailFactory().create(0);
        OrderDetail orderDetail2 = getOrderDetailFactory().create(1);
        
        // Exercise
        product.addToOrderDetails(Arrays.asList(orderDetail1, orderDetail2));
        
        // Verify
        assertThat(product.getOrderDetails()).as("Check 'addToOrderDetails' adds the orderDetails to the relationship")
            .contains(orderDetail1).contains(orderDetail2);
        assertThat(product).as("Check 'addToOrderDetails' updates the OrderDetail relationship side")
            .isEqualTo(orderDetail1.getProduct()).isEqualTo(orderDetail2.getProduct());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @throws Exception
     */
    @Test
    public void ProductTest.addToOrderDetailsShouldRemoveTheOrderDetailFromTheorderDetailsRelationship() throws Exception {
        // Setup
        Product product = getProductFactory().create(0);
        OrderDetail orderDetail1 = getOrderDetailFactory().create(0);
        OrderDetail orderDetail2 = getOrderDetailFactory().create(1);
        product.addToOrderDetails(Arrays.asList(orderDetail1, orderDetail2));
        
        // Exercise
        product.removeFromOrderDetails(Collections.singleton(orderDetail1));
        
        // Verify
        assertThat(orderDetail1.getProduct()).as("Check 'removeFromOrderDetails' updates the OrderDetail relationship side")
            .isNull();
        assertThat(product.getOrderDetails()).as("Check 'removeFromOrderDetails' removes a OrderDetail from the relationship")
            .doesNotContain(orderDetail1).contains(orderDetail2);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @throws Exception
     */
    @Test
    public void ProductTest.addToPurchaseOrdersShouldAddThePurchaseOrderToThepurchaseOrdersRelationship() throws Exception {
        // Setup
        Product product = getProductFactory().create(0);
        PurchaseOrder purchaseOrder1 = getPurchaseOrderFactory().create(0);
        PurchaseOrder purchaseOrder2 = getPurchaseOrderFactory().create(1);
        
        // Exercise
        product.addToPurchaseOrders(Arrays.asList(purchaseOrder1, purchaseOrder2));
        
        // Verify
        assertThat(product.getPurchaseOrders()).as("Check 'addToPurchaseOrders' adds the purchaseOrders to the relationship")
            .contains(purchaseOrder1).contains(purchaseOrder2);
        assertThat(product).as("Check 'addToPurchaseOrders' updates the PurchaseOrder relationship side")
            .isEqualTo(purchaseOrder1.getProduct()).isEqualTo(purchaseOrder2.getProduct());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @throws Exception
     */
    @Test
    public void ProductTest.addToPurchaseOrdersShouldRemoveThePurchaseOrderFromThepurchaseOrdersRelationship() throws Exception {
        // Setup
        Product product = getProductFactory().create(0);
        PurchaseOrder purchaseOrder1 = getPurchaseOrderFactory().create(0);
        PurchaseOrder purchaseOrder2 = getPurchaseOrderFactory().create(1);
        product.addToPurchaseOrders(Arrays.asList(purchaseOrder1, purchaseOrder2));
        
        // Exercise
        product.removeFromPurchaseOrders(Collections.singleton(purchaseOrder1));
        
        // Verify
        assertThat(purchaseOrder1.getProduct()).as("Check 'removeFromPurchaseOrders' updates the PurchaseOrder relationship side")
            .isNull();
        assertThat(product.getPurchaseOrders()).as("Check 'removeFromPurchaseOrders' removes a PurchaseOrder from the relationship")
            .doesNotContain(purchaseOrder1).contains(purchaseOrder2);
    }
    
}
