// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package roo.nw.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;
import roo.nw.model.City;
import roo.nw.model.Country;
import roo.nw.model.QStore;
import roo.nw.model.Region;
import roo.nw.model.Store;
import roo.nw.model.Supplier;
import roo.nw.repository.StoreRepositoryCustom;
import roo.nw.repository.StoreRepositoryImpl;

privileged aspect StoreRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: StoreRepositoryImpl implements StoreRepositoryCustom;
    
    declare @type: StoreRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String StoreRepositoryImpl.CITY = "city";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String StoreRepositoryImpl.COUNTRY = "country";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String StoreRepositoryImpl.REGION = "region";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String StoreRepositoryImpl.NAME = "name";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String StoreRepositoryImpl.ADDRESS = "address";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String StoreRepositoryImpl.POSTAL_CODE = "postalCode";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String StoreRepositoryImpl.PHONE = "phone";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Store> StoreRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QStore store = QStore.store;
        
        JPQLQuery<Store> query = from(store);
        
        Path<?>[] paths = new Path<?>[] {store.city,store.country,store.region,store.name,store.address,store.postalCode,store.phone};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(CITY, store.city)
			.map(COUNTRY, store.country)
			.map(REGION, store.region)
			.map(NAME, store.name)
			.map(ADDRESS, store.address)
			.map(POSTAL_CODE, store.postalCode)
			.map(PHONE, store.phone);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, store);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param city
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Store> StoreRepositoryImpl.findByCity(City city, GlobalSearch globalSearch, Pageable pageable) {
        
        QStore store = QStore.store;
        
        JPQLQuery<Store> query = from(store);
        
        Assert.notNull(city, "city is required");
        
        query.where(store.city.eq(city));
        Path<?>[] paths = new Path<?>[] {store.city,store.country,store.region,store.name,store.address,store.postalCode,store.phone};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(CITY, store.city)
			.map(COUNTRY, store.country)
			.map(REGION, store.region)
			.map(NAME, store.name)
			.map(ADDRESS, store.address)
			.map(POSTAL_CODE, store.postalCode)
			.map(PHONE, store.phone);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, store);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param country
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Store> StoreRepositoryImpl.findByCountry(Country country, GlobalSearch globalSearch, Pageable pageable) {
        
        QStore store = QStore.store;
        
        JPQLQuery<Store> query = from(store);
        
        Assert.notNull(country, "country is required");
        
        query.where(store.country.eq(country));
        Path<?>[] paths = new Path<?>[] {store.city,store.country,store.region,store.name,store.address,store.postalCode,store.phone};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(CITY, store.city)
			.map(COUNTRY, store.country)
			.map(REGION, store.region)
			.map(NAME, store.name)
			.map(ADDRESS, store.address)
			.map(POSTAL_CODE, store.postalCode)
			.map(PHONE, store.phone);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, store);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param region
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Store> StoreRepositoryImpl.findByRegion(Region region, GlobalSearch globalSearch, Pageable pageable) {
        
        QStore store = QStore.store;
        
        JPQLQuery<Store> query = from(store);
        
        Assert.notNull(region, "region is required");
        
        query.where(store.region.eq(region));
        Path<?>[] paths = new Path<?>[] {store.city,store.country,store.region,store.name,store.address,store.postalCode,store.phone};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(CITY, store.city)
			.map(COUNTRY, store.country)
			.map(REGION, store.region)
			.map(NAME, store.name)
			.map(ADDRESS, store.address)
			.map(POSTAL_CODE, store.postalCode)
			.map(PHONE, store.phone);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, store);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param suppliers
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Store> StoreRepositoryImpl.findBySuppliersContains(Supplier suppliers, GlobalSearch globalSearch, Pageable pageable) {
        
        QStore store = QStore.store;
        
        JPQLQuery<Store> query = from(store);
        
        Assert.notNull(suppliers, "suppliers is required");
        
        query.where(store.suppliers.contains(suppliers));
        Path<?>[] paths = new Path<?>[] {store.city,store.country,store.region,store.name,store.address,store.postalCode,store.phone};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(CITY, store.city)
			.map(COUNTRY, store.country)
			.map(REGION, store.region)
			.map(NAME, store.name)
			.map(ADDRESS, store.address)
			.map(POSTAL_CODE, store.postalCode)
			.map(PHONE, store.phone);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, store);
    }
    
}
